<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自然语言处理----实验一：语言模型</title>
      <link href="/2024/03/29/zi-ran-yu-yan-chu-li-shi-yan-yi-yu-yan-mo-xing/"/>
      <url>/2024/03/29/zi-ran-yu-yan-chu-li-shi-yan-yi-yu-yan-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>理解并实践语言模型。</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>1.用python编程实践语言模型（uni-gram和bi-gram）,加入平滑技术。<br>2.计算test.txt中句子的PPL，对比uuni-gram和bi-gram语言模型效果。</p><h2 id="实验过程中遇到和解决的问题"><a href="#实验过程中遇到和解决的问题" class="headerlink" title="实验过程中遇到和解决的问题"></a>实验过程中遇到和解决的问题</h2><p><strong>问题1：</strong> 进行数据预处理需要的操作。<br><strong>解决1：</strong> 上网查找资料，进行简单的数据预处理可以将英文全部转换为小写，去除除“’”外的标点符号，根据要求用nltk.tokenize.word_tokenize来进行分词。</p><p><strong>问题2：</strong> 标点作为文本的一部分，需要去除吗？<br><strong>解决2：</strong> 查资料以及结合思考得，标点所包含的语义信息很少，去除标点还有提高效率减少噪音等好处，所以需要去除标点。</p><p><strong>问题3：</strong> 加一平滑具体是怎么做的：是直接从训练集上直接生成词表，表中单词的次数加一；还是先将测试集的未登录词先加入词表，然后词表单词次数加一。<br><strong>解决3：</strong> 通过查询资料以及结合思考，使用训练集直接生成词表，表中单词次数加一并且计算出每个单词出现的概率。至于测试集中出现的未登录词，使用一个小概率来代替未登录词的概率。此概率一般是$P = \frac{1}{N+V}$，其中$N$为训练集所有单词的数量，$V$为词表的大小。</p><p><strong>问题4：</strong> 计算句子概率时连乘导致浮点数下溢。<br><strong>解决4：</strong> 将乘法转换为对数的加法。困惑度计算使用的公式为 $PP=2^{-\frac{1}{N}\sum_{i=1}^{N}log_{2}P(w_{i})}$ ，$P(w_{i})$是一个词的概率，$w_{i}$是句子的第$i$个词，$N$是句子的长度。</p><p><strong>问题5：</strong> 如果一个文本中有若干句子，怎样评估困惑度。<br><strong>解决5：</strong> 如果一个文本中有若干句子，衡量整个文本的困惑度通常是指计算文本的平均困惑度，即将每个句子的困惑度进行平均。</p><p><strong>问题6：</strong> bi_gram中加一平滑应该怎么做？<br><strong>解决6：</strong> 通过上网查询得，平滑后的bigram概率为$P(w_{i}|w_{i-1})=\frac{C(w_{i-1},w_{i})+1}{C(w_{i})+V}$，$C()$是这个/对词在训练数据中出现的次数，$V$是词汇表中的词的数量。如果$w_{1}$不在训练集中，则使用1/(不同前词的个数)。</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>一、uni_gram：</strong></p><p>1，数据预处理。去除标点符号（除了“’”，就是英语的上单引号，因为它很有可能是单词的一部分），将句子全部化为小写字母，将句子分割为单词。输入为训练集文本，输出为单词列表。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 数据预处理，将文本处理成单词列表</span><span class="token keyword">def</span> <span class="token function">preprocess_text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    sentences <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"__eou__"</span><span class="token punctuation">)</span>  <span class="token comment"># 分句</span>    sentences<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> sentence <span class="token keyword">in</span> sentences<span class="token punctuation">:</span>        sentence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"[^\w\s']"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 去除标点，改为小写</span>        words <span class="token operator">+=</span> word_tokenize<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>  <span class="token comment"># 分词</span>    <span class="token keyword">return</span> words<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2，构建词汇表：使用单词列表统计每个唯一单词的出现次数。输出为字典，每个项的格式为{word:count}。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 构建词汇表，vocab为字典，每个项的格式为{word:count}</span><span class="token keyword">def</span> <span class="token function">build_vocab</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>    vocab <span class="token operator">=</span> Counter<span class="token punctuation">(</span>words<span class="token punctuation">)</span>    <span class="token keyword">return</span> vocab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3，计算概率，并使用加一平滑：对于词汇表中的每个单词，计算其在语料库中出现的概率。使用加一平滑，每个单词出现次数加一。所以概率为(单词的出现次数+1)/(语料库中所有单词的总数+词汇表中单词个数)。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算unigram概率（加一平滑）</span><span class="token keyword">def</span> <span class="token function">calculate_unigram_probs</span><span class="token punctuation">(</span>vocab<span class="token punctuation">,</span> total_words<span class="token punctuation">)</span><span class="token punctuation">:</span>    unigram_probs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> word<span class="token punctuation">,</span> count <span class="token keyword">in</span> vocab<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        unigram_probs<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>total_words <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vocab<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> unigram_probs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4，测试文本处理。去除标点符号（除了“’”），将句子全部化为小写字母，将句子分割为单词。输入为训练集文本，输出为二维列表，每个句子的单词存为列表，再将句子存在文本列表中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 数据预处理，将文本处理成二维列表，text列表存储sentence列表，sentence存这个句子的单词</span><span class="token keyword">def</span> <span class="token function">preprocess_text2</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    sentences <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"__eou__"</span><span class="token punctuation">)</span>    sentences<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    text <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> sentence <span class="token keyword">in</span> sentences<span class="token punctuation">:</span>        sentence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"[^\w\s']"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        text<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5,计算困惑度。困惑度的公式见<strong>解决4</strong>，未登录词的公式见<strong>解决3</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算句子困惑度</span><span class="token keyword">def</span> <span class="token function">sentence_perplexity</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> unigram_probs<span class="token punctuation">,</span> vocab<span class="token punctuation">,</span> total_words<span class="token punctuation">)</span><span class="token punctuation">:</span>    perplexity <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> sentence <span class="token keyword">in</span> text<span class="token punctuation">:</span>        prob <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> sentence<span class="token punctuation">:</span>            <span class="token keyword">if</span> word <span class="token keyword">in</span> unigram_probs<span class="token punctuation">:</span>                prob <span class="token operator">+=</span> log2<span class="token punctuation">(</span>unigram_probs<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                prob <span class="token operator">+=</span> log2<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>vocab<span class="token punctuation">)</span> <span class="token operator">+</span> total_words<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 未知单词的概率</span>        perplexity<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>prob <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> perplexity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6，评估文本的困惑度。方法见<strong>解决5</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 评估文本困惑度</span><span class="token keyword">def</span> <span class="token function">text_perplexity</span><span class="token punctuation">(</span>perplexity<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>perplexity<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>perplexity<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>二、bi_gram：</strong><br>1，数据预处理并构建词汇表，将每个句子前面加上“&lt;beg&gt;”，后面加上“&lt;/end&gt;”。<br>2，将训练集处理成二维列表，计算bigram词频。输出为二维字典，一级索引为前词，二级索引为后词。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算bigram词频</span><span class="token keyword">def</span> <span class="token function">calculate_bigram</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    bigram_counts <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> sentence <span class="token keyword">in</span> text<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> sentence<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> bigram_counts<span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                bigram_counts<span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                bigram_counts<span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> bigram_counts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3，计算概率，使用加一平滑。每对词的概率计算方法见<strong>解决6</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算bigram概率</span><span class="token keyword">def</span> <span class="token function">calculate_bigram_probs</span><span class="token punctuation">(</span>bigram_counts<span class="token punctuation">,</span>vocab<span class="token punctuation">)</span><span class="token punctuation">:</span>    bigram_probs <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> prev_word<span class="token punctuation">,</span> <span class="token builtin">list</span> <span class="token keyword">in</span> bigram_counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> back_word<span class="token punctuation">,</span> count <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            bigram_probs<span class="token punctuation">[</span>prev_word<span class="token punctuation">]</span><span class="token punctuation">[</span>back_word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token punctuation">(</span>                vocab<span class="token punctuation">[</span>prev_word<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vocab<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> bigram_probs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4，处理测试文本。<br>5，计算句子困惑度。未登录词的处理方式见<strong>解决6</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算句子困惑度</span><span class="token keyword">def</span> <span class="token function">sentence_perplexity</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> bigram_probs<span class="token punctuation">,</span> vocab<span class="token punctuation">,</span> bigram_counts<span class="token punctuation">)</span><span class="token punctuation">:</span>    perplexity <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> sentence <span class="token keyword">in</span> text<span class="token punctuation">:</span>        prob <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> vocab<span class="token punctuation">:</span>  <span class="token comment"># w1是未登录词</span>                prob <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vocab<span class="token punctuation">)</span>            <span class="token keyword">elif</span> sentence<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> bigram_probs<span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                 <span class="token comment"># w1不是未登录词而w2是</span>                prob <span class="token operator">+=</span> log2<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span>vocab<span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vocab<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment"># 都不是未登录词</span>                prob <span class="token operator">+=</span> log2<span class="token punctuation">(</span>bigram_probs<span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        perplexity<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>prob <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> perplexity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6，评估文本的困惑度。</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>1，使用unigram模型时的困惑度。<br><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021151667.png"></p><p>2，使用bigram模型时的困惑度。<br><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021152088.png"><br>3，bigram的效果比较好。</p><h2 id="附源代码"><a href="#附源代码" class="headerlink" title="附源代码"></a>附源代码</h2><h3 id="uni-gram-py"><a href="#uni-gram-py" class="headerlink" title="uni_gram.py"></a>uni_gram.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>tokenize <span class="token keyword">import</span> word_tokenize<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter<span class="token keyword">from</span> math <span class="token keyword">import</span> log2<span class="token keyword">import</span> re<span class="token comment"># 数据预处理，将文本处理成单词列表</span><span class="token keyword">def</span> <span class="token function">preprocess_text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    sentences <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"__eou__"</span><span class="token punctuation">)</span>  <span class="token comment"># 分句</span>    sentences<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> sentence <span class="token keyword">in</span> sentences<span class="token punctuation">:</span>        sentence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"[^\w\s']"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 去除标点，改为小写</span>        words <span class="token operator">+=</span> word_tokenize<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>  <span class="token comment"># 分词</span>    <span class="token keyword">return</span> words<span class="token comment"># 数据预处理，将文本处理成二维列表，text列表存储sentence列表，sentence存这个句子的单词</span><span class="token keyword">def</span> <span class="token function">preprocess_text2</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    sentences <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"__eou__"</span><span class="token punctuation">)</span>    sentences<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    text <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> sentence <span class="token keyword">in</span> sentences<span class="token punctuation">:</span>        sentence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"[^\w\s']"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        text<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> text<span class="token comment"># 构建词汇表，vocab为字典，每个项的格式为{word:count}</span><span class="token keyword">def</span> <span class="token function">build_vocab</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>    vocab <span class="token operator">=</span> Counter<span class="token punctuation">(</span>words<span class="token punctuation">)</span>    <span class="token keyword">return</span> vocab<span class="token comment"># 计算unigram概率（加一平滑）</span><span class="token keyword">def</span> <span class="token function">calculate_unigram_probs</span><span class="token punctuation">(</span>vocab<span class="token punctuation">,</span> total_words<span class="token punctuation">)</span><span class="token punctuation">:</span>    unigram_probs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> word<span class="token punctuation">,</span> count <span class="token keyword">in</span> vocab<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        unigram_probs<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>total_words <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vocab<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> unigram_probs<span class="token comment"># 计算句子困惑度</span><span class="token keyword">def</span> <span class="token function">sentence_perplexity</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> unigram_probs<span class="token punctuation">,</span> vocab<span class="token punctuation">,</span> total_words<span class="token punctuation">)</span><span class="token punctuation">:</span>    perplexity <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> sentence <span class="token keyword">in</span> text<span class="token punctuation">:</span>        prob <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> sentence<span class="token punctuation">:</span>            <span class="token keyword">if</span> word <span class="token keyword">in</span> unigram_probs<span class="token punctuation">:</span>                prob <span class="token operator">+=</span> log2<span class="token punctuation">(</span>unigram_probs<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                prob <span class="token operator">+=</span> log2<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>vocab<span class="token punctuation">)</span> <span class="token operator">+</span> total_words<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 未知单词的概率</span>        perplexity<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>prob <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> perplexity<span class="token comment"># 评估文本困惑度</span><span class="token keyword">def</span> <span class="token function">text_perplexity</span><span class="token punctuation">(</span>perplexity<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>perplexity<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>perplexity<span class="token punctuation">)</span><span class="token comment"># 加载数据</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"train_LM.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    train_text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"test_LM.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    test_text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>words <span class="token operator">=</span> preprocess_text<span class="token punctuation">(</span>train_text<span class="token punctuation">)</span>  <span class="token comment"># 单词列表</span>vocab <span class="token operator">=</span> build_vocab<span class="token punctuation">(</span>words<span class="token punctuation">)</span>  <span class="token comment"># 词汇表</span>unigram_probs <span class="token operator">=</span> calculate_unigram_probs<span class="token punctuation">(</span>vocab<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># unigram概率</span>test_text <span class="token operator">=</span> preprocess_text2<span class="token punctuation">(</span>test_text<span class="token punctuation">)</span>  <span class="token comment"># text二维列表</span>perplexity <span class="token operator">=</span> sentence_perplexity<span class="token punctuation">(</span>test_text<span class="token punctuation">,</span> unigram_probs<span class="token punctuation">,</span> vocab<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 句子困惑度列表</span>test_perplexity <span class="token operator">=</span> text_perplexity<span class="token punctuation">(</span>perplexity<span class="token punctuation">)</span>  <span class="token comment"># 文本困惑度</span><span class="token keyword">print</span><span class="token punctuation">(</span>test_perplexity<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bi-gram-py"><a href="#bi-gram-py" class="headerlink" title="bi_gram.py"></a>bi_gram.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>tokenize <span class="token keyword">import</span> word_tokenize<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter<span class="token punctuation">,</span> defaultdict<span class="token keyword">from</span> math <span class="token keyword">import</span> log2<span class="token keyword">import</span> re<span class="token comment"># 预处理文本</span><span class="token keyword">def</span> <span class="token function">preprocess_text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    sentences <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"__eou__"</span><span class="token punctuation">)</span>    sentences<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> sentence <span class="token keyword">in</span> sentences<span class="token punctuation">:</span>        sentence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"[^\w\s']"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        words <span class="token operator">+=</span> word_tokenize<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>        words<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&lt;beg&gt;"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> words<span class="token keyword">def</span> <span class="token function">preprocess_text2</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    sentences <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"__eou__"</span><span class="token punctuation">)</span>    sentences<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> sentence <span class="token keyword">in</span> sentences<span class="token punctuation">:</span>        sentence <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"[^\w\s']"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        words<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"&lt;beg&gt;"</span><span class="token punctuation">]</span> <span class="token operator">+</span> word_tokenize<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">"&lt;/end&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> words<span class="token comment"># 构建词汇表</span><span class="token keyword">def</span> <span class="token function">build_vocab</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>    vocab <span class="token operator">=</span> Counter<span class="token punctuation">(</span>words<span class="token punctuation">)</span>    <span class="token keyword">return</span> vocab<span class="token comment"># 计算bigram词频</span><span class="token keyword">def</span> <span class="token function">calculate_bigram</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    bigram_counts <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> sentence <span class="token keyword">in</span> text<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> sentence<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> bigram_counts<span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                bigram_counts<span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                bigram_counts<span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> bigram_counts<span class="token comment"># 计算bigram概率</span><span class="token keyword">def</span> <span class="token function">calculate_bigram_probs</span><span class="token punctuation">(</span>bigram_counts<span class="token punctuation">,</span>vocab<span class="token punctuation">)</span><span class="token punctuation">:</span>    bigram_probs <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> prev_word<span class="token punctuation">,</span> <span class="token builtin">list</span> <span class="token keyword">in</span> bigram_counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> back_word<span class="token punctuation">,</span> count <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            bigram_probs<span class="token punctuation">[</span>prev_word<span class="token punctuation">]</span><span class="token punctuation">[</span>back_word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token punctuation">(</span>                vocab<span class="token punctuation">[</span>prev_word<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vocab<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> bigram_probs<span class="token comment"># 计算句子困惑度</span><span class="token keyword">def</span> <span class="token function">sentence_perplexity</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> bigram_probs<span class="token punctuation">,</span> vocab<span class="token punctuation">,</span> bigram_counts<span class="token punctuation">)</span><span class="token punctuation">:</span>    perplexity <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> sentence <span class="token keyword">in</span> text<span class="token punctuation">:</span>        prob <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> vocab<span class="token punctuation">:</span>  <span class="token comment"># w1是未登录词</span>                prob <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vocab<span class="token punctuation">)</span>            <span class="token keyword">elif</span> sentence<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> bigram_probs<span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                 <span class="token comment"># w1不是未登录词而w2是</span>                prob <span class="token operator">+=</span> log2<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span>vocab<span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vocab<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment"># 都不是未登录词</span>                prob <span class="token operator">+=</span> log2<span class="token punctuation">(</span>bigram_probs<span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sentence<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        perplexity<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>prob <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> perplexity<span class="token keyword">def</span> <span class="token function">text_perplexity</span><span class="token punctuation">(</span>perplexity<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>perplexity<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>perplexity<span class="token punctuation">)</span><span class="token comment"># 示例文本</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"train_LM.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"test_LM.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    test_text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>words <span class="token operator">=</span> preprocess_text<span class="token punctuation">(</span>text<span class="token punctuation">)</span>vocab <span class="token operator">=</span> build_vocab<span class="token punctuation">(</span>words<span class="token punctuation">)</span>train_text <span class="token operator">=</span> preprocess_text2<span class="token punctuation">(</span>text<span class="token punctuation">)</span>bigram_counts <span class="token operator">=</span> calculate_bigram<span class="token punctuation">(</span>train_text<span class="token punctuation">)</span>bigram_probs <span class="token operator">=</span> calculate_bigram_probs<span class="token punctuation">(</span>bigram_counts<span class="token punctuation">,</span>vocab<span class="token punctuation">)</span>test_text <span class="token operator">=</span> preprocess_text2<span class="token punctuation">(</span>test_text<span class="token punctuation">)</span>perplexity <span class="token operator">=</span> sentence_perplexity<span class="token punctuation">(</span>test_text<span class="token punctuation">,</span> bigram_probs<span class="token punctuation">,</span> vocab<span class="token punctuation">,</span> bigram_counts<span class="token punctuation">)</span>test_perplexity <span class="token operator">=</span> text_perplexity<span class="token punctuation">(</span>perplexity<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test_perplexity<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 自然语言处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自然语言处理 </tag>
            
            <tag> 语言模型 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算----实验三：利用Github与Hexo搭建个人博客</title>
      <link href="/2024/03/28/yun-ji-suan-shi-yan-san-li-yong-github-yu-hexo-da-jian-ge-ren-bo-ke/"/>
      <url>/2024/03/28/yun-ji-suan-shi-yan-san-li-yong-github-yu-hexo-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>熟悉使用主流云平台并搭建个人博客或者网站。<br><strong>具体包括：</strong><br>基于Github和Hexo，使用Node.js，设计、实现个人博客或者网站的搭建。</p><h2 id="实验步骤与内容"><a href="#实验步骤与内容" class="headerlink" title="实验步骤与内容"></a>实验步骤与内容</h2><p>博客的网址：<a href="https://chenmeng20030715.github.io/">陈萌的个人博客</a>。本次实验的实验报告名称为<a href="https://chenmeng20030715.github.io/2024/03/28/yun-ji-suan-shi-yan-san-li-yong-github-yu-hexo-da-jian-ge-ren-bo-ke/"><strong>《云计算—-实验三：利用Github与Hexo搭建个人博客》</strong></a>。</p><h3 id="一，准备需要的工具：Git，Github账号，Node-js，Hexo。"><a href="#一，准备需要的工具：Git，Github账号，Node-js，Hexo。" class="headerlink" title="一，准备需要的工具：Git，Github账号，Node.js，Hexo。"></a>一，准备需要的工具：Git，Github账号，Node.js，Hexo。</h3><h4 id="安装Git-。"><a href="#安装Git-。" class="headerlink" title="安装Git 。"></a><strong>安装Git</strong> 。</h4><p>在官网<a href="https://git-scm.com/download/win">安装Git</a>中选择合适的版本，双击.exe文件安装，安装选项全部默认。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021457621.png" height="220" alt="" align="left">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021506584.png" height="220" alt="" align="left"></div><p>最后命令行输入<code>git --version</code>验证是否安装成功。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021518246.png" height="50" alt="" align="left"></div><h4 id="注册Github账号。"><a href="#注册Github账号。" class="headerlink" title="注册Github账号。"></a>注册Github账号。</h4><p>官网<a href="https://github.com/">Github</a>。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021523362.png" height="170" alt="" align="left"></div><h4 id="安装Node-js。"><a href="#安装Node-js。" class="headerlink" title="安装Node.js。"></a>安装Node.js。</h4><p>官网<a href="https://nodejs.cn/">Node.js</a>。下载长期支持版本，安装选项全部默认。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021525931.png" height="220" alt="" align="left"></div><p>完成后命令行输入<code>node -v</code>和<code>npm -v</code>检查是否安装成功。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021528163.png" height="90" alt="" align="left"></div><h4 id="安装Hexo。"><a href="#安装Hexo。" class="headerlink" title="安装Hexo。"></a>安装Hexo。</h4><p>在<code>D</code>盘下新建一个文件夹<code>Myblog</code>用来存放博客文件，在此文件夹下右键打开Git bash。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021529930.png" height="220" alt="" align="left"></div><p>输入<code>npm install -g hexo-cli</code>进行安装，完成后输入<code>hexo -v</code>查看是否安装成功。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021530701.png" height="190" alt="" align="left"></div><h3 id="二，简略建设网站。"><a href="#二，简略建设网站。" class="headerlink" title="二，简略建设网站。"></a>二，简略建设网站。</h3><p>在Git bash中使用<code>hexo init</code>初始化网站，成功后<code>Myblog</code>文件夹下出现多个文件和文件夹。（因为已经对网站进行较多修改，初次初始化不一定与图片中的完全相同）</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021531057.png" height="220" alt="" align="left"></div><p>在bash输入<code>hexo g</code>生成静态网页。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021533175.png" height="190" alt="" align="left"></div><p>输入<code>hexo s</code>打开本地服务器，浏览器中输入给出的网址浏览博客主页。<code>Ctrl+c</code>关闭本地服务。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021534485.png" height="60" alt="" align="left"></div><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021535763.png" height="250" alt="" align="left"></div><p>bash中输入<code>hexo new post "帖子名"</code>来发布新帖子。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021537392.png" height="220" alt="" align="left"></div><h3 id="三，连接本地与远程服务器。"><a href="#三，连接本地与远程服务器。" class="headerlink" title="三，连接本地与远程服务器。"></a>三，连接本地与远程服务器。</h3><h4 id="新建Github仓库"><a href="#新建Github仓库" class="headerlink" title="新建Github仓库"></a>新建Github仓库</h4><p>仓库名为：username.github.io。一定要用<strong>用户名</strong>和<strong>这种格式</strong>才能分配到：<a href="http://username.github.io这样的域名./">http://username.github.io这样的域名。</a></p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021538410.png" height="190" alt="" align="left"></div><h4 id="生成SSH。"><a href="#生成SSH。" class="headerlink" title="生成SSH。"></a>生成SSH。</h4><p>在bash中输入<code>git config --global user.name "yourname"</code>和<code>git config --global user.email "youremail"</code>，注意用户名和邮箱要用Github的用户名和邮箱。输入<code>git config --list</code>来检查用户名和邮箱是否正确。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021542534.png" height="220" alt="" align="left"></div><p>然后输入<code>ssh-keygen -t rsa -C "youremail"</code>来生成密钥，全部选项都用回车即可。在文件夹<code>C:\Users\lenovo\.ssh</code>下找到<code>id_rsa.pub</code>文件。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021544779.png" height="20" alt="" align="left"></div><p>复制文件里的全部内容，在Github中找到settings，再找到SSH and GPG keys。新建一个密钥。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021545467.png" height="180" alt="" align="left">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021546212.png" height="180" alt="" align="left">" height = "220" alt="" align=left /&gt;</div><p>在git bash输入<code>ssh -T git@github.com</code>，有选项就输入<code>yes</code>，成功后如下图。</p><div class="container" style="display: flex">    <img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021548731.png" height="40" alt="" align="left"></div><h3 id="四，将项目部署到Github。"><a href="#四，将项目部署到Github。" class="headerlink" title="四，将项目部署到Github。"></a>四，将项目部署到Github。</h3><p>修改<code>Myblog</code>下的<code>_config.yml</code>，最后一个配置改为（网址就是仓库的地址）：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repository: https://github.com/username/username.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021550011.png" align="left"><p>bash下输入<code>npm install hexo-deployer-git --save</code>安装工具。<code>hexo d</code>将项目推送到Github。</p><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021552740.png" align="left" height="200"><p>在仓库中打开设置，找到Github pages，中间那部分的配置如图。</p><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021553619.png" align="left" height="200"><p>完成之后打开Github给出的网址。</p><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021612246.png" align="left" height="200"><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021613744.png" align="left" height="200"><h3 id="五，美化博客。"><a href="#五，美化博客。" class="headerlink" title="五，美化博客。"></a>五，美化博客。</h3><p>使用hexo主题hexo-theme-matery，官方的介绍在<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>，根据官方的文档先操作一遍（根据自己的需求，有些麻烦的比如评论可以不搞）。</p><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021616320.png" align="left" height="200"><p>找到<code>D:\Myblog\themes\hexo-theme-matery</code>下的<code>_config.yml</code>文件，根据详细的文档注释进行修改。</p><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021618740.png" align="left" height="100"><h4 id="修改色彩。"><a href="#修改色彩。" class="headerlink" title="修改色彩。"></a>修改色彩。</h4><p>不喜欢绿色。打开<code>D:\Myblog\themes\hexo-theme-matery\source\css</code>下的<code>matery.css</code>文件。使用查找替换将绿色改为喜欢的颜色。颜色根据喜好随意修改。此外还去掉了背景图的遮罩。</p><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021619324.png" align="left" height="120"><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021620014.png" align="left" height="100"><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021620622.png" align="left" height="100"><p><code>D:\Myblog\themes\hexo-theme-matery\layout</code>下的文档<code>index.ejs</code>可以修改主页。去掉梦想框。</p><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021623009.png" align="left" height="400"><h4 id="修改主页背景图。"><a href="#修改主页背景图。" class="headerlink" title="修改主页背景图。"></a>修改主页背景图。</h4><p>依据下图路径找到<code>bg-cover-content.ejs</code>，将最底下那几行修改成下面代码所示，最后将自己喜欢的图片添加到<code>banner</code>文件夹中。</p><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021624275.png" align="left" height="100"><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>banner<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 每天切换 banner 图.  Switch banner image every day.</span>    <span class="token comment">// var bannerUrl = "<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'/medias/banner/'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>" + new Date().getDay() + '.jpg';</span>    <span class="token keyword">var</span> bannerUrl <span class="token operator">=</span> <span class="token string">"<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'/medias/banner/'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>"</span> <span class="token operator">+</span> <span class="token string">'0.png'</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url('</span> <span class="token operator">+</span> bannerUrl <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'/medias/banner/0.png'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">}</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021628266.png" align="left" height="200"><h4 id="查看元素来定位要改的位置。"><a href="#查看元素来定位要改的位置。" class="headerlink" title="查看元素来定位要改的位置。"></a>查看元素来定位要改的位置。</h4><p>不知道怎么搞的可以先学习<code>html</code>知识。</p><p>比如修改右侧回到顶部按钮的颜色。打开开发者工具，用选择器选中按钮，在查看器中可以看到它的class。</p><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021629614.png" align="left" height="200"><p>在包围这个按钮的几个div下翻找，就看到了<code>backgourd</code>的配置。</p><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021630769.png" align="left" height="200"><p>鼠标悬停在右上角下划线文字处，还可以看到在哪个文件的哪一行管理这个颜色。</p><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021632074.png" align="left" height="90"><p>于是在matery.css下的1905行找到了可以修改的选项。</p><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021633551.png" align="left" height="90"><h3 id="六，呈现结果。"><a href="#六，呈现结果。" class="headerlink" title="六，呈现结果。"></a>六，呈现结果。</h3><img src="https://raw.githubusercontent.com/ChenMeng20030715/MyImages/main/202404021635109.png" align="left" height="400"> ]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
